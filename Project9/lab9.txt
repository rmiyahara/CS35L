Ryan Miyahara
UCID: 804585999

Step 1
------
To obtain a copy of the Diffutils repo, I used the following command:

$ cp -r ~eggert/src/gnu/diffutils diffutils

Step 2
------
To obtain a log of the changes I used the git log command. It printed out a large
wall of text containing changes made to the program. I used a pipeline to put
this into the file git-log.txt:

$ git log >git-log.txt

Step 3
------
I assumed this would be the same as the git log command, so I pipelined the
output of this command into git-tags.txt:

$ git tag >git-tags.txt

When looking at the file, I saw numberous version numbers which must have been
the numbers of previous builds.

Step 4
------
To find the commit “maint: quote 'like this' or "like this", not `like this'”, I
searched the git-log.txt file I made earlier for the name. Once I found it, I
copied the commit code into my clipboard:

Commit code: 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f

Using git format-patch's man page, I found out that the -l flag could format only
the commit I want. I then used the following command to create quote-patch.txt:
(I had to add a portion to specify the output to a file)

$ git format-patch -1 62ca21c8c1a5aa3488589dcb191a4ef04ae9ed4f --stdout >quote-pa
tch.txt

The contents of the newly made file looks to be formatted as a .diff file which
we learned about during Week 4.

Step 5
------
I first examined git checkout's man page. If I don't use any flags, I am able to
observe the branch specified. I then used the following command:

$ git checkout 'v3.0'

Step 6
------
Next, I had to patch version 3.0 with quote-patch.txt. I remembered the patch
command from the patch lab and used it immediately after step 5.

$ patch -p1 < quote-patch.txt

When prompted for a file I pressed RETURN as the specs had specified. I had
multiple "Hunk #N FAILED" erros. Apparently some of the files that were to be
patched didn't exist or couldnt be found.

Step 7
------
I used the git status command to obtain the following:

$ git status
HEAD detached at v3.0
Changes not staged for commit:
  (use "git add/rm <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   NEWS
        deleted:    README
        deleted:    README-hacking
        modified:   TODO
        modified:   doc/diagmeet.note
        modified:   ms/config.bat
        modified:   ms/config.site
        modified:   po/en.po
        modified:   src/analyze.c
        modified:   src/cmp.c
        modified:   src/context.c
        modified:   src/diff.c
        modified:   src/diff.h
        modified:   src/diff3.c
        modified:   src/dir.c
        modified:   src/ifdef.c
        modified:   src/io.c
        modified:   src/sdiff.c
        modified:   src/side.c
        modified:   src/system.h
        modified:   src/util.c
        modified:   tests/help-version

Untracked files:
  (use "git add <file>..." to include in what will be committed)

        NEWS.orig
        NEWS.rej
        README-hacking.orig
        README-hacking.rej
        README.orig
        README.rej
        cfg.mk.orig
        cfg.mk.rej
        git-log.txt
        git-tags.txt
        ms/config.site.orig
        quote-patch.txt
        src/cmp.c.orig
        src/context.c.orig
        src/diff.c.orig
        src/diff.c.rej
        src/diff.h.orig
        src/diff3.c.orig
        src/diff3.c.rej
        src/dir.c.orig
        src/sdiff.c.orig
        src/system.h.orig
        src/util.c.orig
        tests/help-version.orig

no changes added to commit (use "git add" and/or "git commit -a")

Step 8
------
By looking at the link on the project spec page, I learned that the vc-diff emacs
command displays a .diff file which compares the current file to the version you
started editing. I also learned that the vc-revert command discards all the
changes you made to a fileset and asks to remove all of said changes. The
diff-apply-hunk function applies changes to a target file.

Step 9
------
For the non .c files, I opened each in Emacs and used the vc-revert function by
pressing C-x v u. Emacs then prompted me asking if I would like to revert the
file. After pressing yes I saved and repeated this process for all of the
modified non-.c files. For the deleted files, I was given a few extra prompts
which asked me if I wanted to recover the selected file.
For the .c files, I needed to undo all changes except changes to character string
constants. To do this, I used the vc-diff command to open the patch file. I then
manually reverted the comments.

Step 10
-------
I then examined the .c rej files in the src directory. The two files of this type
are src/diff.c rej and src.diff3.c.rej.I undid these changes manually by going
into the file and changing the apostrophes to back ticks.

Step 11
-------
For this step, I had to remove all the untracked files from the git status
command. To do this I had to find all files ending in .orig or .rej and delete
them. I did this using the git clean command. I first checked its man page
before using it. According to its man page, the command needs -f or -n to run.
In this case, I used -f to actually remove the files.

$ git clean -f

Step 12
-------
When running the command git status, I now only have 7 files.

$ git status
HEAD detached at v3.0
Changes not staged for commit:
  (use "git add <file>..." to update what will be committed)
  (use "git checkout -- <file>..." to discard changes in working directory)

        modified:   src/cmp.c
        modified:   src/diff.c
        modified:   src/diff3.c
        modified:   src/dir.c
        modified:   src/sdiff.c
        modified:   src/side.c
        modified:   src/util.c

no changes added to commit (use "git add" and/or "git commit -a")

When running git diff, I recieve a very long output. I then put all that output
into quote-3.0-patch.txt.

$ git diff >quote-3.0-patch.txt

Step 13
-------
To build my new modified version of Diffutils, I read the file README-hacking.
It gave me a list of commands to compile the patched program. I started by first
obtaining the additional patch:

$ wget https://web.cs.ucla.edu/classes/winter18/cs35L/assign/diffutils-gets.diff

Next, I did the following commands:

$ ./bootstrap
$ patch -p0 < diffutils-gets.diff
$ ./configure
$ make
$ make check

The bootstrap command took a while (about 3 min) to run. The confiure command
took about a minute to execute. After running each command, I ran diff . - which
told me the following:

$ diff . -
diff: cannot compare '-' to a directory

Since there are no longer any backticks, this verifies the changes. I ran the
diff --help command as well and all strings were cased in apostrophes rather than
a backtick in the front.

Step 14
-------
To perform the sanity test, I created a directory titled diffutils-3.0 which has
the original v3.0 and a second directory called diffutils-3.0-patch which had the
modified source code. I used the following commands:

$ cd ..
$ cp ~eggert/src/gnu/diffutils diffutils-3.0
$ cd diffutils-3.0
$ git checkout v3.0
$ cd ..
$ mv diffutils diffutils-3.0-patch
$ diff -pru diffutils-3.0 diffutils-3.0-patch >quote-3.0-test.txt

Step 15
-------
When running the last command from step 14, I received a ton of lines of
differences. Despite this, none of them were related to comments of the source
code.
